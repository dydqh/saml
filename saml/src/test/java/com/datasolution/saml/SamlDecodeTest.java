package com.datasolution.saml;

import java.io.StringReader;
import java.util.Base64;
import java.util.Base64.Decoder;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.fasterxml.jackson.databind.deser.ValueInstantiator.Gettable;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "file:src/main/webapp/WEB-INF/spring/root-context.xml",
		"file:src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml" // DispatcherServlet(web.xml에 대한 정보가필요)
})
@WebAppConfiguration
public class SamlDecodeTest {

	String SAML = "";
	Decoder decoder = Base64.getDecoder();
	byte[] decodedBytes = decoder.decode(SAML.getBytes());
	String decodedSAML = new String(decodedBytes);
	
	@Test
	public void test() {
		Document doc = convertStringToXMLDocument(decodedSAML);
		System.out.println(decodedSAML);
		System.out.println(doc.getFirstChild().getNodeName());
		
		Element root = doc.getDocumentElement();
        System.out.println("Root : " + root.getTagName());
        
        NodeList list = root.getElementsByTagName("saml2:Assertion");
        System.out.println("Node List Length : " + list.getLength());
        
        Element element = (Element)list.item(0);
        String id = element.getAttribute("ID");
        System.out.println(id);
        
        String version = element.getAttribute("Version");
        System.out.println(version);
        
        NodeList list2 = root.getElementsByTagName("ds:SignedInfo");
        System.out.println("Node List Length : " + list2.getLength());
        
        Element element1 = (Element)list2.item(0);
        Element element2 = (Element)list2.item(1);
        Element element3 = (Element)list2.item(2);
        
        String version1 = element1.getAttribute("Version");
        System.out.println(version1);
        
        String version2 = element2.getAttribute("Version");
        System.out.println(version2);
        
//        String version3 = element3.getAttribute("Version");
//        System.out.println(version3);
	}
	
	private static Document convertStringToXMLDocument(String xmlString) 
    {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = null;
        try
        {
            builder = factory.newDocumentBuilder();
            Document doc = builder.parse(new InputSource(new StringReader(xmlString)));
            return doc;
        } 
        catch (Exception e) 
        {
            e.printStackTrace();
        }
        return null;
    }
}
